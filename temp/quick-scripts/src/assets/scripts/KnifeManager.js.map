{"version":3,"sources":["assets\\scripts\\KnifeManager.js"],"names":["cc","Class","Component","properties","throwForce","serializable","Vec2","onLoad","manager","director","getCollisionManager","enabled","enabledDebugDraw","enabledDrawBoundingBox","isActive","selfRB","node","getComponent","RigidBody","selfCollider","PhysicsBoxCollider","on","onClick","start","applyLinearImpulse","getWorldCenter","gravityScale","onBeginContact","contact","self","other","console","log","_name","linearVelocity","_type","setParent"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEAA,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAGLC,EAAAA,UAAU,EAAE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,UAAU,EAAE;AACRC,MAAAA,YAAY,EAAE,IADN;AAER,iBAAS,IAAIL,EAAE,CAACM,IAAP;AAFD;AAhBJ,GAHP;AAyBL;AAEAC,EAAAA,MA3BK,oBA2BK;AACN,QAAIC,OAAO,GAAGR,EAAE,CAACS,QAAH,CAAYC,mBAAZ,EAAd,CADM,CAGN;;AACAF,IAAAA,OAAO,CAACG,OAAR,GAAkB,IAAlB,CAJM,CAMN;;AACAH,IAAAA,OAAO,CAACI,gBAAR,GAA2B,IAA3B,CAPM,CASN;;AACAJ,IAAAA,OAAO,CAACK,sBAAR,GAAiC,IAAjC;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,MAAL,GAAc,KAAKC,IAAL,CAAUC,YAAV,CAAuBjB,EAAE,CAACkB,SAA1B,CAAd,CAZM,CAY8C;;AACpD,SAAKC,YAAL,GAAoB,KAAKH,IAAL,CAAUC,YAAV,CAAuBjB,EAAE,CAACoB,kBAA1B,CAApB,CAbM,CAa6D;AACnE;AACA;;AACA,SAAKJ,IAAL,CAAUK,EAAV,CAAa,WAAb,EAAyB,KAAKC,OAA9B,EAAsC,IAAtC,EAhBM,CAiBN;AACH,GA7CI;AA+CLC,EAAAA,KA/CK,mBA+CI,CAER,CAjDI;AAmDL;AAEAD,EAAAA,OArDK,qBAqDI;AACL;AACA,QAAG,CAAC,KAAKR,QAAT,EACI;AACJ,SAAKC,MAAL,CAAYS,kBAAZ,CAA+B,KAAKpB,UAApC,EAAgD,KAAKW,MAAL,CAAYU,cAAZ,EAAhD,EAA6E,IAA7E;AACA,SAAKV,MAAL,CAAYW,YAAZ,GAA2B,CAA3B;AACH,GA3DI;AA4DLC,EAAAA,cA5DK,0BA4DUC,OA5DV,EA4DmBC,IA5DnB,EA4DyBC,KA5DzB,EA4D+B;AAChC;AACA;AACA;AACA;AACA;AACA,QAAG,CAAC,KAAKhB,QAAT,EACI;AACJiB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBJ,OAAxB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBF,KAAtB,EATgC,CAUhC;;AACA,QAAGA,KAAK,CAACd,IAAN,CAAWiB,KAAX,IAAoB,QAAvB,EAAgC;AAC5B,WAAKnB,QAAL,GAAgB,KAAhB;AACA,WAAKE,IAAL,CAAUkB,cAAV,GAA2B,IAAIlC,EAAE,CAACM,IAAP,CAAY,CAAZ,EAAc,CAAd,CAA3B;AACA,WAAKS,MAAL,CAAYoB,KAAZ,GAAoB,CAApB;AACA,WAAKnB,IAAL,CAAUoB,SAAV,CAAoBN,KAAK,CAACd,IAA1B,EAJ4B,CAM5B;AAEH;AAEJ;AAjFI,CAAT","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        throwForce: {\r\n            serializable: true,\r\n            default: new cc.Vec2(),\r\n        }\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        let manager = cc.director.getCollisionManager();\r\n\r\n        // Enabled the colider manager.\r\n        manager.enabled = true;\r\n\r\n        // Enabled draw collider\r\n        manager.enabledDebugDraw = true;\r\n\r\n        // Enabled draw collider bounding box\r\n        manager.enabledDrawBoundingBox = true;\r\n        this.isActive = true;\r\n        this.selfRB = this.node.getComponent(cc.RigidBody); //getting rigid body component of this knife instance\r\n        this.selfCollider = this.node.getComponent(cc.PhysicsBoxCollider); //getting box collider component of this knife instance\r\n        //listening for mouse click on this system\r\n        // cc.systemEvent.on(cc.SystemEvent.EventType.MOUSE_DOWN,this.onClick,this);\r\n        this.node.on('mousedown',this.onClick,this);\r\n        // this.selfCollider.on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter,this);\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n\r\n    onClick(){\r\n        //if this knife is not active then return from this call\r\n        if(!this.isActive)\r\n            return;\r\n        this.selfRB.applyLinearImpulse(this.throwForce, this.selfRB.getWorldCenter(),true);\r\n        this.selfRB.gravityScale = 5;\r\n    },\r\n    onBeginContact(contact, self, other){\r\n        // console.log(\"this.selfRB\",this.selfRB);\r\n        // this.oldVelocity = this.selfRB.linearVelocity;\r\n        // console.log(\"prev velocity: \",this.oldVelocity);\r\n        // this.selfRB.linearVelocity = new cc.Vec2(this.oldVelocity.x,-500);\r\n        // this.selfRB.applyLinearImpulse(new cc.Vec2(0,-20000), this.selfRB.getWorldCenter(),true);\r\n        if(!this.isActive)\r\n            return;\r\n        console.log(\"contact: \",contact);\r\n        console.log(\"other: \",other);\r\n        //if we are colliding with the circle\r\n        if(other.node._name == \"Circle\"){\r\n            this.isActive = false;\r\n            this.node.linearVelocity = new cc.Vec2(0,0);\r\n            this.selfRB._type = 1;\r\n            this.node.setParent(other.node);\r\n            \r\n            // this.selfRB.gravityScale = 0;\r\n            \r\n        }\r\n\r\n    },\r\n});\r\n"]}