{"version":3,"sources":["assets\\scripts\\KnifeManager.js"],"names":["cc","Class","Component","properties","throwForce","serializable","Vec2","onLoad","isActive","selfRB","node","getComponent","RigidBody","selfCollider","PhysicsBoxCollider","on","onClick","console","log","start","applyLinearImpulse","getWorldCenter","gravityScale","onBeginContact","onPreSolve","contact","otherCollider","body","_type","linearVelocity","oldSize","size","oldOffset","offset","width","x","setParent"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEAA,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAGLC,EAAAA,UAAU,EAAE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,UAAU,EAAE;AACRC,MAAAA,YAAY,EAAE,IADN;AAER,iBAAS,IAAIL,EAAE,CAACM,IAAP;AAFD;AAhBJ,GAHP;AAyBL;AAEAC,EAAAA,MA3BK,oBA2BK;AACN;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,MAAL,GAAc,KAAKC,IAAL,CAAUC,YAAV,CAAuBX,EAAE,CAACY,SAA1B,CAAd,CAZM,CAY8C;;AACpD,SAAKC,YAAL,GAAoB,KAAKH,IAAL,CAAUC,YAAV,CAAuBX,EAAE,CAACc,kBAA1B,CAApB,CAbM,CAa6D;AACnE;AACA;;AACA,SAAKJ,IAAL,CAAUK,EAAV,CAAa,WAAb,EAAyB,KAAKC,OAA9B,EAAsC,IAAtC,EAhBM,CAiBN;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB,KAAKR,IAA9B;AACH,GA9CI;AAgDLS,EAAAA,KAhDK,mBAgDI,CAER,CAlDI;AAoDL;AAEAH,EAAAA,OAtDK,qBAsDI;AACL;AACA,QAAG,CAAC,KAAKR,QAAT,EACI;AACJS,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,SAAKT,MAAL,CAAYW,kBAAZ,CAA+B,KAAKhB,UAApC,EAAgD,KAAKK,MAAL,CAAYY,cAAZ,EAAhD,EAA6E,IAA7E;AACA,SAAKZ,MAAL,CAAYa,YAAZ,GAA2B,CAA3B;AACH,GA7DI;AA8DLC,EAAAA,cA9DK,4BA8DW;AACZN,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH,GAhEI;AAiELM,EAAAA,UAjEK,sBAiEMC,OAjEN,EAiEcZ,YAjEd,EAiE4Ba,aAjE5B,EAiE0C;AAC3C,QAAG,CAAC,KAAKlB,QAAT,EACI;AACJ,SAAKA,QAAL,GAAgB,KAAhB;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BL,YAA7B,EAJ2C,CAK3C;;AACAA,IAAAA,YAAY,CAACc,IAAb,CAAkBC,KAAlB,GAA0B,CAA1B,CAN2C,CAMd;;AAC7Bf,IAAAA,YAAY,CAACc,IAAb,CAAkBE,cAAlB,GAAmC,IAAI7B,EAAE,CAACM,IAAP,CAAY,CAAZ,EAAc,CAAd,CAAnC,CAP2C,CAOU;;AACrDO,IAAAA,YAAY,CAACc,IAAb,CAAkBL,YAAlB,GAAiC,CAAjC,CAR2C,CAQP;AACpC;;AACA,SAAKQ,OAAL,GAAejB,YAAY,CAACkB,IAA5B,CAV2C,CAUT;;AAClC,SAAKC,SAAL,GAAiBnB,YAAY,CAACoB,MAA9B,CAX2C,CAWL;;AACtCpB,IAAAA,YAAY,CAACkB,IAAb,GAAoB,IAAI/B,EAAE,CAACM,IAAP,CAAY,KAAKwB,OAAL,CAAaI,KAAzB,EAAgC,EAAhC,CAApB,CAZ2C,CAYc;;AACzDrB,IAAAA,YAAY,CAACoB,MAAb,GAAsB,IAAIjC,EAAE,CAACM,IAAP,CAAY,KAAK0B,SAAL,CAAeG,CAA3B,EAA8B,CAAC,IAA/B,CAAtB,CAb2C,CAaiB;;AAC5DtB,IAAAA,YAAY,CAACH,IAAb,CAAkB0B,SAAlB,CAA4BV,aAAa,CAAChB,IAA1C;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH;AAjFI,CAAT","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        throwForce: {\r\n            serializable: true,\r\n            default: new cc.Vec2(),\r\n        }\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        // let manager = cc.director.getCollisionManager();\r\n\r\n        // // Enabled the colider manager.\r\n        // manager.enabled = true;\r\n\r\n        // // Enabled draw collider\r\n        // manager.enabledDebugDraw = true;\r\n\r\n        // // Enabled draw collider bounding box\r\n        // manager.enabledDrawBoundingBox = true;\r\n        this.isActive = true;\r\n        this.selfRB = this.node.getComponent(cc.RigidBody); //getting rigid body component of this knife instance\r\n        this.selfCollider = this.node.getComponent(cc.PhysicsBoxCollider); //getting box collider component of this knife instance\r\n        //listening for mouse click on this system\r\n        // cc.systemEvent.on(cc.SystemEvent.EventType.MOUSE_DOWN,this.onClick,this);\r\n        this.node.on('mousedown',this.onClick,this);\r\n        // this.selfCollider.on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter,this);\r\n        console.log(\"this.node\", this.node);\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n\r\n    onClick(){\r\n        //if this knife is not active then return from this call\r\n        if(!this.isActive)\r\n            return;\r\n        console.log(\"clicked\");\r\n        this.selfRB.applyLinearImpulse(this.throwForce, this.selfRB.getWorldCenter(),true);\r\n        this.selfRB.gravityScale = 1;\r\n    },\r\n    onBeginContact(){\r\n        console.log(\"contact\");\r\n    },\r\n    onPreSolve(contact,selfCollider, otherCollider){\r\n        if(!this.isActive)\r\n            return;\r\n        this.isActive = false;\r\n        console.log(\"selfCollider: \",selfCollider);\r\n        //updating rigid body dynamics of the knife\r\n        selfCollider.body._type = 1; //setting the type of bofy to kinematic\r\n        selfCollider.body.linearVelocity = new cc.Vec2(0,0); //resetting linear velocity \r\n        selfCollider.body.gravityScale = 0; //setting gravity scale to 0 so that gravity does not have impact on this knife\r\n        //updating box collider of the knife\r\n        this.oldSize = selfCollider.size; //saving old size of collider\r\n        this.oldOffset = selfCollider.offset; //saving old offset of collider\r\n        selfCollider.size = new cc.Vec2(this.oldSize.width, 80); //reducing the size of knife collider\r\n        selfCollider.offset = new cc.Vec2(this.oldOffset.x, -23.5); //shifting down the knife box collider\r\n        selfCollider.node.setParent(otherCollider.node);\r\n        console.log(\"pre solve\");\r\n    }\r\n\r\n});\r\n"]}